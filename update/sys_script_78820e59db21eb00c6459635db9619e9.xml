<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_brig3_deployment_deployment_request</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Hikon - Create Appointment</name>
        <order>10000</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// appointment creation logic //
	var sn_appointment = current.variables.sn_appointment;
	var helper = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.APPOINTMENT_BOOKING_IMPL);
	if (helper.validateAppointment(sn_appointment)) {
		var max = parseInt(gs.getProperty('sn_apptmnt_booking.user_max_new_appointments_daily', 100));
        var canBookAppointment = new sn_apptmnt_booking.AppointmentBookingUtil().canBookAppointment(max);
		var sn_appointmentJSON = JSON.parse(sn_appointment);
		
		// check if appointment exists?
		var appointmentAvailable = true; // appointmentExists(sn_appointmentJSON.selectedWindow.actualStart, sn_appointmentJSON.selectedWindow.actualEnd, sn_appointmentJSON.selectedWindow.recordProducer, sn_appointmentJSON.config.opened_for, sn_appointmentJSON.config.location);
		
		var platform = sn_appointmentJSON.config.view;
		var url;
		
		if (!appointmentAvailable || !canBookAppointment) {
			current.setAbortAction(true);
			// redirecting user to the same record producer
			if(!canBookAppointment) {
				if(platform == 'platform'){
					url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_catalog_view=catalog_field_service_catalog&sysparm_error_code=LIMIT_REACHED";
				}else{
					url = "/csm?id=sc_cat_item&sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_error_code=LIMIT_REACHED";
				} 
			} else{
				if(platform == 'platform'){
					url = "com.glideapp.servicecatalog_cat_item_view.do?v=1&sysparm_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_catalog_view=catalog_field_service_catalog&sysparm_error_code=CREATION_FAILED";
				}else{
					url = "/csm?id=sc_cat_item&sys_id="+sn_appointmentJSON.selectedWindow.recordProducer+"&sysparm_error_code=CREATION_FAILED";
				} 
			}
		} else {
			if(platform == 'platform'){
				url = "/x_brig3_deployment_deployment_request.do?sys_id="+current.sys_id;
			}else{
				url = "/csm?id=fsm_ticket&table=x_brig3_deployment_deployment_request&sys_id="+current.sys_id+"&view=csp";
			}	 
		}
		
		//redirecting to the appropriate page
		gs.setRedirect(url);
		
		if (!appointmentAvailable || !canBookAppointment)
			return;
		
		// creating an appointment
		var appointmentId = helper.submitAppointmentFromPortal(sn_appointment, current, sn_appointmentJSON.config.opened_for, sn_appointmentJSON.config.location, current.environment, current.client_configuration_form_link);
		if(platform == 'platform'){
			url = "/x_brig3_deployment_deployment_request.do?sys_id="+current.sys_id;
		}else{
			url = "/csm?id=fsm_ticket&table=x_brig3_deployment_deployment_request&sys_id="+current.sys_id+"&view=csp";
		}	
		var message = 'Please track your appointment request here <a href="'+url+'">'+current.number+'</a>';
		//Do not want to show error message since we are already redirecting to the work order page.
		//gs.addInfoMessage(message);
	}
	
})(current, previous);


function appointmentExists(startDate, endDate, catalogId, openedFor, location) {
		
		var helper = new sn_apptmnt_booking.AppointmentBooking_Factory().getWrapperType(sn_apptmnt_booking.AppointmentBookingConstants.APPOINTMENT);
		var taskRecord = {};
		taskRecord["location"] = location;
		
		var result = helper.getAppointmentAvailability(taskRecord, startDate, endDate, catalogId, openedFor, "", "", false);		
		if (result && result.success && result.no_appt_available == false || result.no_appt_available == "false") {
			return true;
		}else{
			return false;
		}
}
]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>fge.shay</sys_created_by>
        <sys_created_on>2018-11-02 14:55:06</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>78820e59db21eb00c6459635db9619e9</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>Hikon - Create Appointment</sys_name>
        <sys_overrides/>
        <sys_package display_value="Deployment Requests" source="x_brig3_deployment">0f893c49db29a340342ef3571d9619d4</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Deployment Requests">0f893c49db29a340342ef3571d9619d4</sys_scope>
        <sys_update_name>sys_script_78820e59db21eb00c6459635db9619e9</sys_update_name>
        <sys_updated_by>shay.faingold@hikon.co.uk</sys_updated_by>
        <sys_updated_on>2019-01-21 21:56:59</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=78820e59db21eb00c6459635db9619e9"/>
</record_update>
